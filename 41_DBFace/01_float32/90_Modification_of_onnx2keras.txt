### tensorflow==2.2.0

from tensorflow import keras
import numpy as np
import logging


def convert_upsample(node, params, layers, lambda_func, node_name, keras_name):
    """
    Convert upsample.
    :param node: current operation node
    :param params: operation attributes
    :param layers: available keras layers
    :param lambda_func: function for keras Lambda layer
    :param node_name: internal converter name
    :param keras_name: resulting layer name
    :return: None
    """
    logger = logging.getLogger('onnx2keras:upsample')
    logger.warning('!!! EXPERIMENTAL SUPPORT (upsample) !!!')

    # if len(node.input) != 1:
    #     raise AttributeError('Unsupported number of inputs')

    # if params['mode'].decode('utf-8') != 'nearest':
    #     logger.error('Cannot convert non-nearest upsampling.')
    #     raise AssertionError('Cannot convert non-nearest upsampling')

    # scale = np.uint8(params['scales'][-2:])

    # upsampling = keras.layers.UpSampling2D(
    #     size=scale, name=keras_name
    # )

    if len(node.input) > 2:
        raise AttributeError('Unsupported number of inputs')

    if params['mode'].decode('utf-8') == 'linear':
        import tensorflow.compat.v1 as tf
        sess = tf.InteractiveSession()
        scales = layers[node.input[1]].eval()
        scale = (int(scales[2]), int(scales[3]))
        sess.close()

        upsampling = keras.layers.UpSampling2D(
            size=scale, name=keras_name, interpolation="bilinear"
        )

        layers[node_name] = upsampling(layers[node.input[0]])

    elif params['mode'].decode('utf-8') == 'nearest':
        # import tensorflow.compat.v1 as tf
        # sess = tf.InteractiveSession()
        # scales = layers[node.input[1]].eval()
        # print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ scales:', scales)
        # from decimal import Decimal, ROUND_HALF_UP
        # s1 = int(Decimal(str(scales[2])).quantize(Decimal('0'), rounding=ROUND_HALF_UP))
        # s2 = int(Decimal(str(scales[3])).quantize(Decimal('0'), rounding=ROUND_HALF_UP))
        # scale = (s1, s2)
        # print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ scale:', scale)
        # sess.close()
        scale = (2, 2)

        upsampling = keras.layers.UpSampling2D(
            size=scale, name=keras_name
        )

        layers[node_name] = upsampling(layers[node.input[0]])
    else:
        logger.error('Cannot convert non-linear/non-nearest upsampling.')
        raise AssertionError('Cannot convert non-linear/non-nearest upsampling')

    layers[node_name] = upsampling(layers[node.input[0]])
